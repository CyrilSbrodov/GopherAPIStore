// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/CyrilSbrodov/GopherAPIStore/internal/storage (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	storage "github.com/CyrilSbrodov/GopherAPIStore/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CollectOrder mocks base method.
func (m *MockStorage) CollectOrder(arg0, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectOrder", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectOrder indicates an expected call of CollectOrder.
func (mr *MockStorageMockRecorder) CollectOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectOrder", reflect.TypeOf((*MockStorage)(nil).CollectOrder), arg0, arg1)
}

// GetAllOrders mocks base method.
func (m *MockStorage) GetAllOrders() ([]storage.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders")
	ret0, _ := ret[0].([]storage.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockStorageMockRecorder) GetAllOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockStorage)(nil).GetAllOrders))
}

// GetBalance mocks base method.
func (m *MockStorage) GetBalance(arg0 string) (*storage.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(*storage.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockStorageMockRecorder) GetBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockStorage)(nil).GetBalance), arg0)
}

// GetOrder mocks base method.
func (m *MockStorage) GetOrder(arg0 string) (int, []storage.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]storage.Orders)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockStorageMockRecorder) GetOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockStorage)(nil).GetOrder), arg0)
}

// Login mocks base method.
func (m *MockStorage) Login(arg0 *storage.AcceptUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockStorageMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockStorage)(nil).Login), arg0)
}

// Register mocks base method.
func (m *MockStorage) Register(arg0 *storage.AcceptUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockStorageMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockStorage)(nil).Register), arg0)
}

// UpdateOrders mocks base method.
func (m *MockStorage) UpdateOrders(arg0 []storage.Orders) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrders", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrders indicates an expected call of UpdateOrders.
func (mr *MockStorageMockRecorder) UpdateOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrders", reflect.TypeOf((*MockStorage)(nil).UpdateOrders), arg0)
}

// UpdateUserBalance mocks base method.
func (m *MockStorage) UpdateUserBalance(arg0 []storage.Orders) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserBalance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserBalance indicates an expected call of UpdateUserBalance.
func (mr *MockStorageMockRecorder) UpdateUserBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserBalance", reflect.TypeOf((*MockStorage)(nil).UpdateUserBalance), arg0)
}

// Withdraw mocks base method.
func (m *MockStorage) Withdraw(arg0 string, arg1 *storage.Order) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockStorageMockRecorder) Withdraw(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockStorage)(nil).Withdraw), arg0, arg1)
}

// Withdrawals mocks base method.
func (m *MockStorage) Withdrawals(arg0 string) (int, []storage.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdrawals", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]storage.Order)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Withdrawals indicates an expected call of Withdrawals.
func (mr *MockStorageMockRecorder) Withdrawals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawals", reflect.TypeOf((*MockStorage)(nil).Withdrawals), arg0)
}
